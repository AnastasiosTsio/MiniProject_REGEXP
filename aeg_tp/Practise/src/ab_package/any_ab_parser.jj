/* Michaël PÉRIN, VERIMAG / Univ. Grenoble-Alpes / Polytech Grenbole, december 2020

USER-FRIENDLY PARSER
- Parse words of the langage { w in {a,b}* |  #a(w) <= #b(w) }
- The grammar accepts any words on the alphabet {a,b} regardless of the number of "a" and "b"
- Checking #a<=#b is done after parsing in parse_string.

USAGE
- see Main.java
*/


PARSER_BEGIN(Any_ab_parser)

package ab_package;
import ab_package.AsciiFont;

public class Any_ab_parser
{
  // * Parser

  public static Couple parse(java.io.StringReader reader) throws ParseException
  {
    return new Any_ab_parser(reader).P();
  }

  public static Couple parse_string(String input_string)
  {
    try
    {
      java.io.StringReader reader = new java.io.StringReader(input_string);
      Couple c = parse(reader);
      if (c.left > c.right)
      	System.out.println("Parse error: " + c.left + " a > " + c.right +" b");
      return c;
    }
    catch (Throwable e)
    { // JavaCC throws Error objects!
      System.out.println("Parse error: " + e.getMessage());
      return new Couple(-1,-1);
    }
  }

}
PARSER_END(Any_ab_parser)

/* TOKENS */

SKIP : { " " }

TOKEN : { "a" | "b" }



/* A PARSER of { w in {a,b}* | #a(w)<=#b(w) }

** The grammar accepts any word of {a,b}*
  P ::= S . EOF
  S ::=
      | "a" . S
      | "b" . S
      | epsilon

** The parser with computations counts the number of a and b
  - no result for functions S,a,b
  - the couple c is provided as an argument of a,b,S to be updated in place
    by functions a and b
*/

Couple P() : { Couple c = new Couple(0,0); }
{
  S(c)
  eof(c)
  {return c; }
}

void S(Couple c) : { }
{ a(c)
  S(c)
  {}

| b(c)
  S(c)
  {  }

| epsilon()
  {}
}


/* USER FRIENDLY PARSER
   Additional non-terminals for re-printing tokens.
*/

void a(Couple c) : { }
{
  "a"
  { c.plus(1,0);
    if (c.left<=c.right ) { AsciiFont.green("a"); } else { AsciiFont.yellow("a"); }
  }
}

void b(Couple c) : { }
{
  "b"
  { c.plus(0,1);
    AsciiFont.green("b");
  }
}

void eof(Couple c) : { }
{
  <EOF>
  { if (c.left<=c.right)
      { AsciiFont.green("EOF"); }
    else
      { AsciiFont.red("EOF"); }
  }
}

void epsilon() : { }
{
  /*epsilon */ { AsciiFont.gray("ε"); }
}
